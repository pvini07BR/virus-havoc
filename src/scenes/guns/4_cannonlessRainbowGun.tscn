[gd_scene load_steps=17 format=2]

[ext_resource path="res://scenes/bullets/rainbowBullet.tscn" type="PackedScene" id=1]
[ext_resource path="res://assets/images/guns/gun_cannonlessRainbowGun.png" type="Texture" id=2]
[ext_resource path="res://assets/images/guns/preview/gunPreview_cannonlessRainbowGun.png" type="Texture" id=3]
[ext_resource path="res://scenes/guns/cannonlessRainbowGun.gd" type="Script" id=4]
[ext_resource path="res://assets/images/rainbowGunRay.png" type="Texture" id=5]
[ext_resource path="res://assets/images/rainbowGunRay2.png" type="Texture" id=6]
[ext_resource path="res://assets/images/rainbowGunRayTracing.png" type="Texture" id=7]
[ext_resource path="res://assets/sounds/rainbowGunActive.wav" type="AudioStream" id=8]
[ext_resource path="res://assets/sounds/rainbowBulletRelease.wav" type="AudioStream" id=9]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;
render_mode unshaded;

uniform float Shift_Hue;

void fragment() {
// Input:3
	vec3 input_color;
	vec4 texture_color = texture(TEXTURE, UV);
	input_color = texture_color.rgb;

// VectorFunc:2
	vec3 color_hsv;
	{
		vec3 c = input_color;
		vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
		vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
		vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));
		float d = q.x - min(q.w, q.y);
		float e = 1.0e-10;
		color_hsv=vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
	}

	color_hsv.x = mod((color_hsv.x + Shift_Hue), 1.0f);

// VectorFunc:5
	vec3 color_rgb;
	{
		vec3 c = color_hsv;
		vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
		vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
		color_rgb=c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
	}

// Output:0
	texture_color = vec4(color_rgb.rgb,texture_color.a);
	COLOR.rgba = texture_color;

}"

[sub_resource type="ShaderMaterial" id=2]
resource_local_to_scene = true
shader = SubResource( 1 )
shader_param/Shift_Hue = 0.0

[sub_resource type="SpriteFrames" id=3]
animations = [ {
"frames": [ ExtResource( 6 ), ExtResource( 5 ) ],
"loop": true,
"name": "default",
"speed": 30.0
} ]

[sub_resource type="Shader" id=4]
code = "shader_type canvas_item;
render_mode unshaded;

uniform float Shift_Hue;

void fragment() {
// Input:3
	vec3 input_color;
	vec4 texture_color = texture(TEXTURE, UV);
	input_color = texture_color.rgb;

// VectorFunc:2
	vec3 color_hsv;
	{
		vec3 c = input_color;
		vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
		vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
		vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));
		float d = q.x - min(q.w, q.y);
		float e = 1.0e-10;
		color_hsv=vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
	}

	color_hsv.x = mod((color_hsv.x + Shift_Hue), 1.0f);

// VectorFunc:5
	vec3 color_rgb;
	{
		vec3 c = color_hsv;
		vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
		vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
		color_rgb=c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
	}

// Output:0
	texture_color = vec4(color_rgb.rgb,texture_color.a);
	COLOR.rgba = texture_color;

}"

[sub_resource type="ShaderMaterial" id=5]
resource_local_to_scene = true
shader = SubResource( 4 )
shader_param/Shift_Hue = 0.0

[sub_resource type="Shader" id=6]
code = "shader_type canvas_item;
render_mode unshaded;

uniform float Shift_Hue;

void fragment() {
// Input:3
	vec3 input_color;
	vec4 texture_color = texture(TEXTURE, UV);
	input_color = texture_color.rgb;

// VectorFunc:2
	vec3 color_hsv;
	{
		vec3 c = input_color;
		vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
		vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
		vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));
		float d = q.x - min(q.w, q.y);
		float e = 1.0e-10;
		color_hsv=vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
	}

	color_hsv.x = mod((color_hsv.x + Shift_Hue), 1.0f);

// VectorFunc:5
	vec3 color_rgb;
	{
		vec3 c = color_hsv;
		vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
		vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
		color_rgb=c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
	}

// Output:0
	texture_color = vec4(color_rgb.rgb,texture_color.a);
	COLOR.rgba = texture_color;

}"

[sub_resource type="ShaderMaterial" id=7]
resource_local_to_scene = true
shader = SubResource( 6 )
shader_param/Shift_Hue = null

[node name="cannonlessRainbowGun" type="Node2D" groups=[
"gun",
]]
script = ExtResource( 4 )
projectile = ExtResource( 1 )
previewSprite = ExtResource( 3 )
gunName = "GUNNAME_CANNONLESS_RAINBOW_GUN"
gunDesc = "GUNDESC_CANNONLESS_RAINBOW_GUN"
damage = 2.0

[node name="ray" type="AnimatedSprite" parent="."]
visible = false
material = SubResource( 2 )
position = Vector2( 36, 18 )
frames = SubResource( 3 )

[node name="sprite" type="Sprite" parent="."]
material = SubResource( 5 )
texture = ExtResource( 2 )
centered = false

[node name="raytracing" type="Sprite" parent="."]
visible = false
material = SubResource( 7 )
position = Vector2( 33, 17.5 )
texture = ExtResource( 7 )

[node name="cooldown" type="Timer" parent="."]
wait_time = 0.07
autostart = true

[node name="rainbowEffect" type="Tween" parent="."]
repeat = true
playback/repeat = true

[node name="shootingCooldown" type="Timer" parent="."]
wait_time = 0.5
one_shot = true

[node name="active" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 8 )
volume_db = -20.0

[node name="release" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 9 )
volume_db = -20.0

[connection signal="timeout" from="cooldown" to="." method="_on_cooldown_timeout"]
[connection signal="timeout" from="shootingCooldown" to="." method="_on_shootingCooldown_timeout"]
